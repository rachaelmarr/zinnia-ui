// This file was removed from the create account flow but backed up for potential future use

import React, { useState } from 'react';
import svgPaths from "../imports/svg-g9tptgdje9";

interface VendorSignupStep1Props {
  onNavigate: (view: string) => void;
  onNext: (accountType: 'vendor' | 'couple') => void;
  onCancel: () => void;
}

function LoginAndTerms() {
  return (
    <div className="content-stretch flex flex-col gap-1 h-[29px] items-start justify-start relative shrink-0" data-name=".Login and Terms">
      <div className="flex flex-col font-['Montserrat:Regular',_sans-serif] font-normal justify-center leading-[0] relative shrink-0 text-[#47567b] text-[0px] tracking-[0.28px] w-full">
        <p className="leading-[1.5] text-[14px]">
          <span>{`Already have an account? `}</span>
          <span className="[text-decoration-skip-ink:none] [text-underline-position:from-font] decoration-solid font-['Montserrat:Regular',_sans-serif] font-normal text-[#2e7684] tracking-[0.28px] underline cursor-pointer hover:text-[#1e5a66]">Log in here</span>
        </p>
      </div>
    </div>
  );
}

function Frame8() {
  return (
    <div className="content-stretch flex flex-col gap-1 items-center justify-start relative shrink-0">
      <div className="flex flex-col font-['Literata:SemiBold',_sans-serif] font-semibold justify-center leading-[0] relative shrink-0 text-[#47567b] text-[24px] text-center w-full max-w-[530.5px]">
        <p className="leading-[1.5]">Are you signing up as a couple or vendor?</p>
      </div>
      <LoginAndTerms />
    </div>
  );
}

function Illustration() {
  return (
    <div className="absolute left-1/2 size-[261px] top-1/2 translate-x-[-50%] translate-y-[-50%]" data-name="Illustration">
      <svg className="block size-full" fill="none" preserveAspectRatio="none" viewBox="0 0 261 261">
        <g id="Illustration">
          <path d={svgPaths.p2e0def80} fill="var(--fill-0, #47567B)" id="Vector" />
        </g>
      </svg>
    </div>
  );
}

interface SelectionCardProps {
  type: 'couple' | 'vendor';
  isSelected: boolean;
  onClick: () => void;
  children: React.ReactNode;
  label: string;
}

function SelectionCard({ type, isSelected, onClick, children, label }: SelectionCardProps) {
  const borderClass = isSelected 
    ? "border-[#47567b] border-[3px] border-solid" 
    : "border-[#ccd7e6] border-[3px] border-solid";
  
  const bgClass = isSelected ? "bg-[#ffffff]" : "bg-[#ffffff]";
  
  return (
    <div 
      className={`content-stretch flex flex-col gap-4 items-center justify-start overflow-clip relative shrink-0 cursor-pointer transition-all duration-200 hover:scale-105 ${isSelected ? 'shadow-lg' : 'hover:shadow-md'}`}
      onClick={onClick}
      role="radio"
      aria-checked={isSelected}
      aria-label={`Select ${label} account type`}
      tabIndex={0}
      onKeyDown={(e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          onClick();
        }
      }}
    >
      <div className={`${bgClass} relative rounded-[300px] shrink-0 size-[203px]`}>
        <div className="overflow-clip relative size-[203px]">
          {children}
        </div>
        <div aria-hidden="true" className={`absolute ${borderClass} inset-0 pointer-events-none rounded-[300px]`} />
      </div>
      <div className="font-['Literata:SemiBold',_sans-serif] font-semibold leading-[0] relative shrink-0 text-[#47567b] text-[20px] text-nowrap">
        <p className="leading-[1.5] whitespace-pre">{label}</p>
      </div>
    </div>
  );
}

function CoupleIllustration() {
  return <Illustration />;
}

function Layer2() {
  return (
    <div className="absolute inset-[52.31%_48.69%_21.43%_27.1%]" data-name="Layer_2">
      <svg className="block size-full" fill="none" preserveAspectRatio="none" viewBox="0 0 44 48">
        <g id="Layer_2">
          <path d={svgPaths.p36183200} fill="var(--fill-0, #DC332E)" id="Vector" />
        </g>
      </svg>
    </div>
  );
}

function Layer1() {
  return (
    <div className="absolute inset-[17.84%_11.74%_10.73%_7.99%]" data-name="Layer_1">
      <svg className="block size-full" fill="none" preserveAspectRatio="none" viewBox="0 0 146 130">
        <g id="Layer_1">
          <path d={svgPaths.p3db2b480} fill="var(--fill-0, #47567B)" id="Vector" />
        </g>
      </svg>
    </div>
  );
}

function VendorIllustration() {
  return (
    <div className="relative shrink-0 size-[230px]">
      <div className="absolute left-[11.5px] overflow-clip size-[181px] top-2" data-name="Illustration">
        <div className="absolute contents inset-[17.84%_11.74%_10.73%_7.99%]">
          <Layer2 />
          <Layer1 />
        </div>
      </div>
    </div>
  );
}

function Frame13({ selectedType, onTypeSelect }: { selectedType: 'couple' | 'vendor' | null, onTypeSelect: (type: 'couple' | 'vendor') => void }) {
  return (
    <div className="content-stretch flex gap-[61px] items-start justify-start relative shrink-0">
      <SelectionCard
        type="couple"
        isSelected={selectedType === 'couple'}
        onClick={() => onTypeSelect('couple')}
        label="Couple"
      >
        <CoupleIllustration />
      </SelectionCard>
      
      <SelectionCard
        type="vendor"
        isSelected={selectedType === 'vendor'}
        onClick={() => onTypeSelect('vendor')}
        label="Vendor"
      >
        <VendorIllustration />
      </SelectionCard>
    </div>
  );
}

function Frame14({ selectedType, onTypeSelect }: { selectedType: 'couple' | 'vendor' | null, onTypeSelect: (type: 'couple' | 'vendor') => void }) {
  return (
    <div className="content-stretch flex flex-col gap-5 items-center justify-start relative shrink-0">
      <Frame8 />
      <Frame13 selectedType={selectedType} onTypeSelect={onTypeSelect} />
    </div>
  );
}

function Frame10({ selectedType, onTypeSelect }: { selectedType: 'couple' | 'vendor' | null, onTypeSelect: (type: 'couple' | 'vendor') => void }) {
  return (
    <div className="absolute content-stretch flex flex-col gap-[60px] items-center justify-start top-[190px]" style={{ left: "calc(25% + 94.75px)" }}>
      <Frame14 selectedType={selectedType} onTypeSelect={onTypeSelect} />
    </div>
  );
}

function BaseButton({ onClick, children, variant = 'secondary' }: { onClick: () => void, children: React.ReactNode, variant?: 'primary' | 'secondary' }) {
  const baseClasses = "box-border content-stretch flex gap-2 items-start justify-start overflow-clip px-3 py-2 relative rounded-3xl shrink-0 cursor-pointer transition-colors duration-200";
  
  if (variant === 'primary') {
    return (
      <div className="content-stretch flex h-[37px] items-center justify-start relative shrink-0 w-[164px]">
        <div className="basis-0 bg-[#667493] hover:bg-[#5a6180] grow min-h-px min-w-px relative rounded-3xl shrink-0" onClick={onClick}>
          <div className="flex flex-row justify-center overflow-clip relative size-full">
            <div className="box-border content-stretch flex gap-2 items-start justify-center px-3 py-2 relative w-full">
              <div className="font-['Montserrat:Medium',_sans-serif] font-medium leading-[0] relative shrink-0 text-[14px] text-neutral-50 text-nowrap tracking-[0.28px]">
                <p className="leading-[1.5] whitespace-pre">{children}</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }
  
  return (
    <div className="content-stretch flex h-9 items-center justify-center relative shrink-0">
      <div className={`${baseClasses} hover:bg-gray-50`} onClick={onClick}>
        <div className="font-['Montserrat:Medium',_sans-serif] font-medium leading-[0] relative shrink-0 text-[#47567b] text-[14px] text-nowrap tracking-[0.28px]">
          <p className="leading-[1.5] whitespace-pre">{children}</p>
        </div>
      </div>
    </div>
  );
}

function Frame15({ onCancel, onNext, canProceed }: { onCancel: () => void, onNext: () => void, canProceed: boolean }) {
  return (
    <div className="content-stretch flex gap-3 items-start justify-start relative shrink-0">
      <BaseButton onClick={onCancel} variant="secondary">Cancel</BaseButton>
      <BaseButton onClick={onNext} variant="primary">
        <span className={canProceed ? "opacity-100" : "opacity-50"}>Next</span>
      </BaseButton>
    </div>
  );
}

function Frame11({ onCancel, onNext, canProceed }: { onCancel: () => void, onNext: () => void, canProceed: boolean }) {
  return (
    <div className="absolute bg-neutral-50 bottom-0 box-border content-stretch flex flex-col gap-3 items-end justify-start left-0 overflow-clip px-[100px] py-8 shadow-[0px_2px_4px_-1px_rgba(0,0,0,0.06),0px_4px_6px_-1px_rgba(0,0,0,0.1)] w-full">
      <Frame15 onCancel={onCancel} onNext={onNext} canProceed={canProceed} />
    </div>
  );
}

// Timeline components
function Layer3() {
  return (
    <div className="absolute bottom-[18.63%] left-[39.88%] right-[38.05%] top-0" data-name="Layer_2">
      <svg className="block size-full" fill="none" preserveAspectRatio="none" viewBox="0 0 35 39">
        <g id="Layer_2">
          <path d={svgPaths.p3ed46880} fill="var(--fill-0, #667593)" id="Vector" />
          <path d={svgPaths.p3b39e600} fill="var(--fill-0, #667593)" id="Vector_2" />
          <path d={svgPaths.p2ea1a80} fill="var(--fill-0, #667593)" id="Vector_3" />
          <path d={svgPaths.p2aef6b00} fill="var(--fill-0, #667593)" id="Vector_4" />
        </g>
      </svg>
    </div>
  );
}

function Layer4() {
  return (
    <div className="absolute bottom-0 left-0 right-0 top-[4.03%]" data-name="Layer_1">
      <svg className="block size-full" fill="none" preserveAspectRatio="none" viewBox="0 0 155 45">
        <g id="Layer_1">
          <path d={svgPaths.p3d8f0780} fill="var(--fill-0, #47567B)" id="Vector" />
        </g>
      </svg>
    </div>
  );
}

function TimelineIllo() {
  return (
    <div className="h-[46.726px] relative shrink-0 w-[154.84px]" data-name="Timeline Illo">
      <Layer3 />
      <Layer4 />
    </div>
  );
}

function TimelineStepActive() {
  return (
    <div className="content-stretch flex flex-col gap-4 items-center justify-start relative shrink-0" data-name="Timeline Step/Default">
      <TimelineIllo />
      <div className="flex flex-col font-['Literata:Light',_sans-serif] font-light justify-center leading-[0] relative shrink-0 text-[#47567b] text-[14px] text-nowrap tracking-[0.28px] uppercase">
        <ol className="list-decimal" start="1">
          <li className="ms-[21px]">
            <span className="leading-[1.5]">Get Started</span>
          </li>
        </ol>
      </div>
    </div>
  );
}

function TimelineStepInactive({ stepNumber, label }: { stepNumber: number, label: string }) {
  return (
    <div className="content-stretch flex flex-col gap-4 items-center justify-start relative shrink-0">
      <div className="h-[46.726px] relative shrink-0 w-[154.84px]">
        <div className="absolute bottom-[18.63%] left-[39.88%] right-[38.05%] top-0">
          <svg className="block size-full" fill="none" preserveAspectRatio="none" viewBox="0 0 35 39">
            <g>
              <path d={svgPaths.p3ed46880} fill="var(--fill-0, white)" />
              <path d={svgPaths.p3b39e600} fill="var(--fill-0, white)" />
              <path d={svgPaths.p2ea1a80} fill="var(--fill-0, white)" />
              <path d={svgPaths.p2aef6b00} fill="var(--fill-0, white)" />
            </g>
          </svg>
        </div>
        <div className="absolute bottom-0 left-0 right-0 top-[4.03%]">
          <svg className="block size-full" fill="none" preserveAspectRatio="none" viewBox="0 0 155 45">
            <g>
              <path d={svgPaths.p3d8f0780} fill="var(--fill-0, #47567B)" />
            </g>
          </svg>
        </div>
      </div>
      <div className="flex flex-col font-['Literata:Light',_sans-serif] font-light justify-center leading-[0] relative shrink-0 text-[#47567b] text-[14px] text-nowrap tracking-[0.28px] uppercase">
        <ol className="list-decimal" start={stepNumber}>
          <li className="ms-[21px]">
            <span className="leading-[1.5]">{label}</span>
          </li>
        </ol>
      </div>
    </div>
  );
}

function Timeline() {
  return (
    <div className="absolute content-stretch flex h-[100px] items-start justify-start left-1/2 top-[60px] translate-x-[-50%]" data-name="Timeline">
      <div className="content-stretch flex flex-col items-start justify-start relative shrink-0">
        <TimelineStepActive />
      </div>
      <div className="content-stretch flex flex-col items-start justify-start relative shrink-0">
        <TimelineStepInactive stepNumber={2} label="Account Info" />
      </div>
      <div className="content-stretch flex flex-col items-start justify-start relative shrink-0">
        <TimelineStepInactive stepNumber={3} label="Vendor type" />
      </div>
      <div className="content-stretch flex flex-col items-start justify-start relative shrink-0">
        <TimelineStepInactive stepNumber={4} label="Business info" />
      </div>
      <div className="content-stretch flex flex-col items-start justify-start relative shrink-0">
        <TimelineStepInactive stepNumber={5} label="Create account" />
      </div>
    </div>
  );
}

function CloseButton({ onClick }: { onClick: () => void }) {
  return (
    <div 
      className="absolute size-6 top-6 cursor-pointer hover:bg-gray-100 rounded-full flex items-center justify-center transition-colors duration-200" 
      style={{ left: "calc(100% - 96px)" }}
      onClick={onClick}
      role="button"
      aria-label="Close signup flow"
      tabIndex={0}
      onKeyDown={(e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          onClick();
        }
      }}
    >
      <svg className="block size-full" fill="none" preserveAspectRatio="none" viewBox="0 0 24 24">
        <g>
          <path d="M6 6L18 18M6 18L18 6L6 18Z" stroke="var(--stroke-0, #47567B)" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" />
        </g>
      </svg>
    </div>
  );
}

export default function VendorSignupStep1({ onNavigate, onNext, onCancel }: VendorSignupStep1Props) {
  const [selectedType, setSelectedType] = useState<'couple' | 'vendor' | null>(null);
  
  const handleNext = () => {
    if (selectedType) {
      onNext(selectedType);
    }
  };
  
  const handleCancel = () => {
    onCancel();
  };
  
  const handleClose = () => {
    onNavigate('landing');
  };
  
  return (
    <div className="bg-[#ffffff] overflow-clip relative rounded-xl size-full min-h-screen" data-name="Sign Up - Vendor or Couple">
      {/* Hidden form input for binding to vendors.account_type */}
      <input 
        type="hidden" 
        name="vendors.account_type" 
        value={selectedType || ''} 
        aria-label="Account type selection for vendors table"
      />
      
      <Frame10 selectedType={selectedType} onTypeSelect={setSelectedType} />
      <Frame11 onCancel={handleCancel} onNext={handleNext} canProceed={selectedType !== null} />
      <Timeline />
      <CloseButton onClick={handleClose} />
    </div>
  );
}