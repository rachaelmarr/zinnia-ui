// This file was removed from the create account flow but backed up for potential future use

import { useState, useEffect } from 'react'
import svgPaths from "../imports/svg-7ouaf9prez";

interface UserTypeSelectionProps {
  onNavigate: (view: string) => void;
  onNext: (accountType: 'couple' | 'vendor') => void;
  onCancel: () => void;
}

// Timeline Step Components
function TimelineStepActive() {
  return (
    <div className="content-stretch flex flex-col gap-4 items-center justify-start relative shrink-0">
      <div className="h-[46.726px] relative shrink-0 w-[154.84px]">
        <div className="absolute bottom-[18.63%] left-[39.88%] right-[38.05%] top-0">
          <svg className="block size-full" fill="none" preserveAspectRatio="none" viewBox="0 0 35 39">
            <g>
              <path d={svgPaths.p3ed46880} fill="#667593" />
              <path d={svgPaths.p3b39e600} fill="#667593" />
              <path d={svgPaths.p2ea1a80} fill="#667593" />
              <path d={svgPaths.p2aef6b00} fill="#667593" />
            </g>
          </svg>
        </div>
        <div className="absolute bottom-0 left-0 right-0 top-[4.03%]">
          <svg className="block size-full" fill="none" preserveAspectRatio="none" viewBox="0 0 155 45">
            <g>
              <path d={svgPaths.p3d8f0780} fill="#47567B" />
            </g>
          </svg>
        </div>
      </div>
      <div className="flex flex-col font-['Literata:Light',_sans-serif] font-light justify-center leading-[0] relative shrink-0 text-[#47567b] text-[14px] text-nowrap tracking-[0.28px] uppercase">
        <ol className="list-decimal" start="1">
          <li className="ms-[21px]">
            <span className="leading-[1.5]">Get Started</span>
          </li>
        </ol>
      </div>
    </div>
  );
}

function TimelineStepInactive({ stepNumber, label }: { stepNumber: number, label: string }) {
  return (
    <div className="content-stretch flex flex-col gap-4 items-center justify-start relative shrink-0">
      <div className="h-[46.726px] relative shrink-0 w-[154.84px]">
        <div className="absolute bottom-[18.63%] left-[39.88%] right-[38.05%] top-0">
          <svg className="block size-full" fill="none" preserveAspectRatio="none" viewBox="0 0 35 39">
            <g>
              <path d={svgPaths.p3ed46880} fill="white" />
              <path d={svgPaths.p3b39e600} fill="white" />
              <path d={svgPaths.p2ea1a80} fill="white" />
              <path d={svgPaths.p2aef6b00} fill="white" />
            </g>
          </svg>
        </div>
        <div className="absolute bottom-0 left-0 right-0 top-[4.03%]">
          <svg className="block size-full" fill="none" preserveAspectRatio="none" viewBox="0 0 155 45">
            <g>
              <path d={svgPaths.p3d8f0780} fill="#47567B" />
            </g>
          </svg>
        </div>
      </div>
      <div className="flex flex-col font-['Literata:Light',_sans-serif] font-light justify-center leading-[0] relative shrink-0 text-[#47567b] text-[14px] text-nowrap tracking-[0.28px] uppercase">
        <ol className="list-decimal" start={stepNumber}>
          <li className="ms-[21px]">
            <span className="leading-[1.5]">{label}</span>
          </li>
        </ol>
      </div>
    </div>
  );
}

function Timeline() {
  return (
    <div className="hidden md:flex absolute content-stretch h-[100px] items-start justify-start left-1/2 top-[60px] translate-x-[-50%]">
      <div className="content-stretch flex flex-col items-start justify-start relative shrink-0">
        <TimelineStepActive />
      </div>
      <div className="content-stretch flex flex-col items-start justify-start relative shrink-0">
        <TimelineStepInactive stepNumber={2} label="Account Info" />
      </div>
      <div className="content-stretch flex flex-col items-start justify-start relative shrink-0">
        <TimelineStepInactive stepNumber={3} label="Vendor type" />
      </div>
      <div className="content-stretch flex flex-col items-start justify-start relative shrink-0">
        <TimelineStepInactive stepNumber={4} label="Business info" />
      </div>
      <div className="content-stretch flex flex-col items-start justify-start relative shrink-0">
        <TimelineStepInactive stepNumber={5} label="Create account" />
      </div>
    </div>
  );
}

// Mobile Step Indicator
function MobileStepIndicator() {
  return (
    <div className="md:hidden flex flex-col items-center gap-2 mb-8">
      <div className="flex gap-2">
        {[1, 2, 3, 4, 5].map((step) => (
          <div
            key={step}
            className={`w-2 h-2 rounded-full ${
              step === 1 ? 'bg-[#47567b]' : 'bg-[#ccd7e6]'
            }`}
          />
        ))}
      </div>
      <p className="font-['Literata:Light',_sans-serif] font-light text-[#47567b] text-[12px] uppercase tracking-[0.28px]">
        Step 1 of 5
      </p>
    </div>
  );
}

// Illustration Components
function CoupleIllustration() {
  return (
    <div className="absolute left-1/2 size-[261px] top-1/2 translate-x-[-50%] translate-y-[-50%]">
      <svg className="block size-full" fill="none" preserveAspectRatio="none" viewBox="0 0 261 261">
        <g>
          <path d={svgPaths.p2e0def80} fill="#47567B" />
        </g>
      </svg>
    </div>
  );
}

function VendorIllustration() {
  return (
    <div className="relative shrink-0 size-[230px]">
      <div className="absolute left-[11.5px] overflow-clip size-[181px] top-2">
        <div className="absolute contents inset-[17.84%_11.74%_10.73%_7.99%]">
          <div className="absolute inset-[52.31%_48.69%_21.43%_27.1%]">
            <svg className="block size-full" fill="none" preserveAspectRatio="none" viewBox="0 0 44 48">
              <g>
                <path d={svgPaths.p36183200} fill="#DC332E" />
              </g>
            </svg>
          </div>
          <div className="absolute inset-[17.84%_11.74%_10.73%_7.99%]">
            <svg className="block size-full" fill="none" preserveAspectRatio="none" viewBox="0 0 146 130">
              <g>
                <path d={svgPaths.p3db2b480} fill="#47567B" />
              </g>
            </svg>
          </div>
        </div>
      </div>
    </div>
  );
}

// Selection Card Component
interface SelectionCardProps {
  type: 'couple' | 'vendor';
  isSelected: boolean;
  onClick: () => void;
  children: React.ReactNode;
  label: string;
}

function SelectionCard({ type, isSelected, onClick, children, label }: SelectionCardProps) {
  const borderClass = isSelected 
    ? "border-[#47567b] border-[3px] border-solid" 
    : "border-[#ccd7e6] border-[3px] border-solid";
  
  return (
    <div 
      className="content-stretch flex flex-col gap-4 items-center justify-start overflow-clip relative shrink-0 cursor-pointer transition-all duration-200 hover:scale-105"
      onClick={onClick}
      role="radio"
      aria-checked={isSelected}
      aria-label={`Select ${label} account type`}
      tabIndex={0}
      onKeyDown={(e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          onClick();
        }
      }}
    >
      <div className="bg-[#ffffff] relative rounded-[300px] shrink-0 size-[203px] md:size-[203px]">
        <div className="overflow-clip relative size-[203px] md:size-[203px] rounded-[300px]">
          {children}
        </div>
        <div aria-hidden="true" className={`absolute ${borderClass} inset-0 pointer-events-none rounded-[300px]`} />
      </div>
      <div className="font-['Literata:SemiBold',_sans-serif] font-semibold leading-[0] relative shrink-0 text-[#47567b] text-[20px] text-nowrap">
        <p className="leading-[1.5] whitespace-pre">{label}</p>
      </div>
    </div>
  );
}

// Button Components
function CancelButton({ onClick }: { onClick: () => void }) {
  return (
    <div className="content-stretch flex h-9 items-center justify-center relative shrink-0" onClick={onClick}>
      <div className="box-border content-stretch flex gap-2 items-start justify-start overflow-clip px-3 py-2 relative rounded-3xl shrink-0 cursor-pointer transition-colors duration-200 hover:bg-gray-50">
        <div className="font-['Montserrat:Medium',_sans-serif] font-medium leading-[0] relative shrink-0 text-[#47567b] text-[14px] text-nowrap tracking-[0.28px]">
          <p className="leading-[1.5] whitespace-pre">Cancel</p>
        </div>
      </div>
    </div>
  );
}

function NextButton({ onClick, disabled }: { onClick: () => void, disabled: boolean }) {
  return (
    <div className="content-stretch flex h-[37px] items-center justify-start relative shrink-0 w-[164px]">
      <div 
        className={`basis-0 grow min-h-px min-w-px relative rounded-3xl shrink-0 cursor-pointer transition-colors duration-200 ${
          disabled 
            ? 'bg-[#e9ebef] cursor-not-allowed' 
            : 'bg-[#667493] hover:bg-[#5a6180]'
        }`}
        onClick={disabled ? undefined : onClick}
      >
        <div className="flex flex-row justify-center overflow-clip relative size-full">
          <div className="box-border content-stretch flex gap-2 items-start justify-center px-3 py-2 relative w-full">
            <div className={`font-['Montserrat:Medium',_sans-serif] font-medium leading-[0] relative shrink-0 text-[14px] text-neutral-50 text-nowrap tracking-[0.28px] ${
              disabled ? 'text-[#8c97ac]' : 'text-neutral-50'
            }`}>
              <p className="leading-[1.5] whitespace-pre">Next</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

function ButtonGroup({ onCancel, onNext, disabled }: { onCancel: () => void, onNext: () => void, disabled: boolean }) {
  return (
    <div className="content-stretch flex gap-3 items-start justify-start relative shrink-0">
      <CancelButton onClick={onCancel} />
      <NextButton onClick={onNext} disabled={disabled} />
    </div>
  );
}

// Close Button
function CloseButton({ onClick }: { onClick: () => void }) {
  return (
    <div 
      className="absolute size-6 top-6 right-6 cursor-pointer hover:bg-gray-100 rounded-full flex items-center justify-center transition-colors duration-200" 
      onClick={onClick}
      role="button"
      aria-label="Close signup flow"
      tabIndex={0}
      onKeyDown={(e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          onClick();
        }
      }}
    >
      <svg className="block size-full" fill="none" preserveAspectRatio="none" viewBox="0 0 24 24">
        <g>
          <path d="M6 6L18 18M6 18L18 6L6 18Z" stroke="#47567B" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" />
        </g>
      </svg>
    </div>
  );
}

export default function UserTypeSelection({ onNavigate, onNext, onCancel }: UserTypeSelectionProps) {
  const [selectedType, setSelectedType] = useState<'couple' | 'vendor' | null>(null);
  
  // Component lifecycle logging
  useEffect(() => {
    console.log('🟢 UserTypeSelection component mounted');
    console.log('🟢 onNext prop:', typeof onNext, onNext && onNext.toString ? onNext.toString().substring(0, 100) : 'function without toString or undefined');
    
    return () => {
      console.log('🔴 UserTypeSelection component unmounting');
    };
  }, []);
  
  // Props change logging
  useEffect(() => {
    console.log('🔄 onNext prop changed:', typeof onNext, onNext ? 'defined' : 'undefined');
  }, [onNext]);
  
  const handleNext = () => {
    console.log('🔄 UserTypeSelection handleNext called, selectedType:', selectedType);
    console.log('🔄 onNext function:', typeof onNext, onNext);
    if (selectedType) {
      console.log('🔄 About to call onNext with selectedType:', selectedType);
      try {
        onNext(selectedType);
        console.log('✅ onNext called successfully');
      } catch (error) {
        console.error('❌ Error calling onNext:', error);
      }
    } else {
      console.log('❌ No selectedType, cannot proceed');
    }
  };
  
  const handleCancel = () => {
    onCancel();
  };
  
  const handleClose = () => {
    onNavigate('landing');
  };
  
  const handleLoginClick = () => {
    onNavigate('auth');
  };
  
  return (
    <div className="bg-[#ffffff] overflow-clip relative size-full min-h-screen max-w-[1440px] mx-auto">
      {/* Hidden form input for binding to users.account_type */}
      <input 
        type="hidden" 
        name="users.account_type" 
        value={selectedType || ''} 
        aria-label="Account type selection for users table"
      />
      
      {/* Timeline for desktop */}
      <Timeline />
      
      {/* Close button */}
      <CloseButton onClick={handleClose} />
      
      {/* Main Content */}
      <div className="absolute content-stretch flex flex-col gap-[60px] items-center justify-start top-[190px] md:top-[190px] left-1/2 transform -translate-x-1/2 px-6 md:px-0">
        
        {/* Mobile Step Indicator */}
        <MobileStepIndicator />
        
        {/* Title and Selection Area */}
        <div className="content-stretch flex flex-col gap-5 items-center justify-start relative shrink-0">
          
          {/* Title Section */}
          <div className="content-stretch flex flex-col gap-1 items-center justify-start relative shrink-0">
            <div className="flex flex-col font-['Literata:SemiBold',_sans-serif] font-semibold justify-center leading-[0] relative shrink-0 text-[#47567b] text-[24px] text-center max-w-[530.5px]">
              <p className="leading-[1.5]">Are you signing up as a couple or vendor?</p>
            </div>
            <div className="flex flex-col font-['Montserrat:Regular',_sans-serif] font-normal justify-center leading-[0] relative shrink-0 text-[#47567b] text-[0px] tracking-[0.28px] w-full">
              <p className="leading-[1.5] text-[14px]">
                <span>Already have an account? </span>
                <span 
                  className="[text-decoration-skip-ink:none] [text-underline-position:from-font] decoration-solid font-['Montserrat:Regular',_sans-serif] font-normal text-[#2e7684] tracking-[0.28px] underline cursor-pointer hover:text-[#1e5a66]"
                  onClick={handleLoginClick}
                >
                  Log in here
                </span>
              </p>
            </div>
          </div>
          
          {/* Selection Cards */}
          <div className="content-stretch flex flex-col md:flex-row gap-6 md:gap-[61px] items-center md:items-start justify-start relative shrink-0">
            <SelectionCard
              type="couple"
              isSelected={selectedType === 'couple'}
              onClick={() => setSelectedType('couple')}
              label="Couple"
            >
              <CoupleIllustration />
            </SelectionCard>
            
            <SelectionCard
              type="vendor"
              isSelected={selectedType === 'vendor'}
              onClick={() => setSelectedType('vendor')}
              label="Vendor"
            >
              <VendorIllustration />
            </SelectionCard>
          </div>
        </div>
      </div>
      
      {/* Bottom Action Bar */}
      <div className="absolute bg-neutral-50 bottom-0 box-border content-stretch flex flex-col gap-3 items-end justify-start left-0 overflow-clip px-6 md:px-[100px] py-8 shadow-[0px_2px_4px_-1px_rgba(0,0,0,0.06),0px_4px_6px_-1px_rgba(0,0,0,0.1)] w-full">
        <ButtonGroup onCancel={handleCancel} onNext={handleNext} disabled={!selectedType} />
      </div>
    </div>
  );
}